RESTful API

	在Restful之前的操作：

		增 POST /user/save POST 新增用户
		删 GET|POST /user/delete  删除用户信息
		改 POST /user/update POST 修改用户信息
		查 GET /user/query/1   根据用户id查询用户数据

	RESTful风格：

		增 POST /user  body中包含数据
		删 DELETE /user/1 | user?id=1 根据ID删除用户信息
		改 PUT|PATCH /user body中包含数据 PUT覆盖修改 PATCH局部修改
		查 GET /user/1 | user?id=1 GET  根据用户id查询用户数据 没有id查询所有 /1 返对象 id=1 返回数组>对象
		
			分页	_page 第几页， _limit一页多少条
				GET /user?_page=7  不传递默认0条
				GET /user?_page=7&_limit=20 不传递默认10条
			排序 _sort设定排序的字段 _order设定排序的方式（默认升序）
				GET /user?_sort=views&_order=asc
				GET /user/1/comments?_sort=votes&_order=asc
				GET /user?_sort=title,views&_order=desc,asc 	多个字段排序
			任意切片数据 _start 开始不包含  _end 结束包含
				GET /users?_start=20&_end=30
				GET /user/1/comments?_start=20&_end=30
				GET /user/1/comments?_start=20&_limit=10
			全文检索	GET /user?q=九哥

客户端接口
	
	密码加密: bcrypt
		加密： var hash = bcrypt.hashSync(用户传过来的明文密码, 加盐数);  加盐数==number
		校验:  bcrypt.compareSync(用户传过来的明文密码, hash); // true|false

webApi 不存在的接口，应该返回 json 而不是报错

------------------------------------------------------------------------------------------------

代理

	接口文档： https://www.cnblogs.com/e-cat/p/8656040.html
	豆瓣:
		hostname:'douban.uieee.com',//主机名
	    port: 443,//端口
	    path:'/v2/movie/top250?start=3&count=1',
	    method:'get'

	数据代理proxy:		request请求 抓取异步数据
	  options={
	    hostname:'api.douban.com',
	    port:443,
	    path:'/v2/movie/top250?count='+req.query.count,
	    method:'GET'
	  };

	  发送http[s]请求
	  http[s].request(配置项,回调(响应对象resHttp))	返回请求对象reqHttp
	  	resHttp 响应对象
	    resHttp.statusCode 状态码  200 OK
	    resHttp.headers 获取响应头信息
	    resHttp.setEncoding('utf-8') 设置编码方式
	    resHttp.on('data/end',fn)  ->send给前端
	  });

	  reqHttp 请求对象
	  reqHttp.on('error',(err)=>{console.log(err)});	监听请求失败信息
	  reqHttp.end();请求结束

------------------------------------------------------------------------------------------------

短信验证
	0. 开通短信服务
		登录阿里云账号->进入 https://dysms.console.aliyun.com/dysms.htm?spm=a2c4g.11186623.2.11.65394c072r02VA#/domestic/text/template
	1. 设置签名管理|模板管理
		https://dysms.console.aliyun.com/dysms.htm?spm=a2c4g.11186623.2.11.65394c072r02VA#/domestic/text/template
		添加 签名 |  添加 模板

	2. 冲1块钱

	 
	3. 申成短信服务器接口的node代码
	https://api.aliyun.com/?spm=a2c4g.11186623.2.14.21a15e3cN95oci#/?product=Dysmsapi&api=SendSms&params={%22RegionId%22:%22default%22,%22PhoneNumbers%22:%2218616902220%22,%22TemplateCode%22:%22SMS_180345610%22}&tab=DEMO&lang=NODEJS

		PhoneNumbers： 电话

		SignName： 签名

		TemplateCode： 模板id

		accessKeyId： 阿里云账号->accessKey管理

		accessKeySecret： 阿里云账号->accessKey管理


----------------------------------------------------------------------------------------------------

socket.io 

	场景：
		Web领域的实时推送技术，也被称作Realtime技术。这种技术要达到的目的是让用户不需要刷新浏览器就可以获得实时更新。它有着广泛的应用场景，比如在线聊天室、在线客服系统、评论系统、WebIM等。
	原理：
		双向通信,前端H5api （WebSocket） + 后端net模块
	API:
		cn:
			https://www.w3cschool.cn/socket/socket-k49j2eia.html
		en:
			https://socket.io/

	
	服务端环境
		修改www:
			const SOCKETIO = require('socket.io');//创建socket实例
			const io = SOCKETIO.listen(server);//监听http实例，未来3000端口下的http请求，会触发socket
			module.export = io;
				注意： www 不热重启，不检查
	客户端配置:
		html里面引入:
			<script src="/socket.io/socket.io.js"></script>
			连接服务器：socket = io('http://localhost:3000');

	服务端主动推送到客户端:
		let io = require('../../../bin/www'); require要在需要时再引入
	    io.emit('mess_type',{data:'服务端的推送数据')//推送

	    客户端订阅
	    socket.on('mess_type',(data)=>{
			console.log('首页_客户端收到',data)
		})

----------------------------------------------------------------------------------------------------

